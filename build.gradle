buildscript {
    ext {
        springBootVersion = '2.0.3.RELEASE'
        wrapperVersion = '1.0.12.RELEASE'
        shadowVersion = '2.0.3'
    }
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:${shadowVersion}"
        classpath("org.springframework.boot.experimental:spring-boot-thin-gradle-plugin:${wrapperVersion}")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'io.spring.dependency-management'

group = 'com.swacorp.crew.skyanalytics'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

ext {
    springCloudVersion = 'Finchley.BUILD-SNAPSHOT'
    springCloudFunctionVersion = "1.0.0.RELEASE"
    springDataDynamoDBVersion = "5.0.2"
    awsLambdaEventsVersion = "2.2.2"
    awsLambdaCoreVersion = "1.1.0"
    awsKinesisAggregatorVersion = "1.0.3"
    awsKinesisJDK = "1.11.368"
}

ext['reactor.version'] = "3.1.7.RELEASE"
assemble.dependsOn = [shadowJar]

jar {
    manifest {
        attributes 'Start-Class': 'example.AppStart'
    }
}

import com.github.jengelman.gradle.plugins.shadow.transformers.*

shadowJar {
    classifier = 'aws'
    dependencies {
        exclude(dependency("org.springframework.cloud:spring-cloud-function-web:${springCloudFunctionVersion}"))
    }
    // Required for Spring
    mergeServiceFiles()
    append 'META-INF/spring.handlers'
    append 'META-INF/spring.schemas'
    append 'META-INF/spring.tooling'
    transform(PropertiesFileTransformer) {
        paths = ['META-INF/spring.factories' ]
        mergeStrategy = "append"
    }
}

configurations {
    testCompile.extendsFrom(compileOnly)
}



dependencies {
    compile("org.springframework.cloud:spring-cloud-starter-function-web:${springCloudFunctionVersion}")
    compile("org.springframework.cloud:spring-cloud-function-adapter-aws:${springCloudFunctionVersion}")
    compile group: 'org.springframework.data', name: 'spring-data-commons', version: springBootVersion
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: springBootVersion
    compile group: 'com.github.derjust', name: 'spring-data-dynamodb', version: springDataDynamoDBVersion
    compile group: 'com.amazonaws', name: 'aws-lambda-java-events', version: awsLambdaEventsVersion
    compile group: 'com.amazonaws', name: 'amazon-kinesis-deaggregator', version: awsKinesisAggregatorVersion
    compile group: 'com.amazonaws', name: 'amazon-kinesis-aggregator', version: awsKinesisAggregatorVersion
    compile group: 'com.amazonaws', name: 'aws-java-sdk-kinesis', version: awsKinesisJDK
    compileOnly("com.amazonaws:aws-lambda-java-core:${awsLambdaCoreVersion}")
    testCompile('org.springframework.boot:spring-boot-starter-test')
    compile files('lib/dms-model.jar')
    compile files('lib/castor-0.9.6-xml.jar')
    compile files('lib/xercesImpl.jar')
    compile files('lib/solver-proxy.jar')
    compile files('lib/appsvc-proxy.jar')
    compile('junit:junit:4.12')
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}
